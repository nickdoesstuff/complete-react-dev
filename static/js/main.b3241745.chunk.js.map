{"version":3,"sources":["hooks/useFetch.js","components/card/card.jsx","components/card-list/card-list.jsx","hooks/useInput.js","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["useFectch","url","useState","data","setData","fetchUrl","setFetchUrl","fetchData","useCallback","a","fetch","response","json","useEffect","Card","props","id","name","email","className","src","alt","CardList","map","item","key","useInput","initialValue","value","setValue","event","target","SearchBox","type","onChange","placeholder","searchVal","onSearchChange","inputProps","App","useFetch","mutants","setSearchVal","filteredMutants","filter","mutant","toLowerCase","includes","newVal","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVAqBeA,EAlBG,SAACC,GAAQ,MAEDC,mBAAS,IAFR,mBAElBC,EAFkB,KAEZC,EAFY,OAIOF,mBAASD,GAJhB,mBAIlBI,EAJkB,KAIRC,EAJQ,KAOnBC,EAAYC,sBAAW,sBAAC,8BAAAC,EAAA,sEACLC,MAAML,GADD,cACtBM,EADsB,gBAETA,EAASC,OAFA,OAEtBT,EAFsB,OAG5BC,EAAQD,GAHoB,2CAI3B,CAACE,IAIJ,OAFAQ,oBAAUN,EAAW,CAACF,IAEf,CAACF,EAAMG,ICCDQ,G,MAfF,SAACC,GAAW,IAAD,EACMA,EAAMZ,KAA1Ba,EADc,EACdA,GAAIC,EADU,EACVA,KAAMC,EADI,EACJA,MAElB,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BJ,EAA1B,0BACHK,IAAI,YAEN,4BAAKJ,GACL,2BAAIC,MCEKI,G,MAVE,SAAC,GAAc,IAAZnB,EAAW,EAAXA,KAClB,OACE,yBAAKgB,UAAU,aACZhB,EAAKoB,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,GAAIb,KAAMqB,UCEnBE,EAVE,SAACC,GAAkB,IAAD,EACPzB,mBAASyB,GADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAOjC,MAAO,CAACD,EAJS,SAACE,GAChBD,EAASC,EAAMC,OAAOH,UCuBXI,G,MAvBG,SAACjB,GAAW,IACpBkB,EAAkDlB,EAAlDkB,KAAML,EAA4Cb,EAA5Ca,MAAOM,EAAqCnB,EAArCmB,SAAUf,EAA2BJ,EAA3BI,UAAWgB,EAAgBpB,EAAhBoB,YADf,EAIST,EAASE,GAJlB,mBAIpBQ,EAJoB,KAITC,EAJS,KAO3BxB,qBAAU,WACRqB,EAASE,KACR,CAACA,EAAWF,IAGf,IAAMI,EAAa,CACjBL,KAAMA,GAAQ,SACdL,MAAOQ,EACPF,SAAUG,EACVlB,UAAWA,GAAa,SACxBgB,YAAaA,GAAe,sBAG9B,OAAO,0BAAWG,K,MCQLC,MAzBf,WAAgB,IAAD,EACKC,EAAS,8CAApBC,EADM,sBAGqBvC,mBAAS,IAH9B,mBAGNkC,EAHM,KAGKM,EAHL,KAKPC,EAAkBF,EAAQG,QAAO,SAACC,GAAD,OACrCA,EAAO5B,KAAK6B,cAAcC,SAASX,EAAUU,kBAO/C,OACE,yBAAK3B,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWS,MAAOQ,EAAWF,SAPN,SAACc,GAC1BN,EAAaM,MAOVL,EAAgBM,OAAS,GAAK,kBAAC,EAAD,CAAU9C,KAAMwC,IACnB,IAA3BA,EAAgBM,QACf,4EChBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b3241745.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\r\n\r\n//accepts a URL, returns state\r\nconst useFectch = (url) => {\r\n  //set initial data to empty array\r\n  const [data, setData] = useState([]);\r\n  //the URL of the data we want to fetch\r\n  const [fetchUrl, setFetchUrl] = useState(url);\r\n\r\n  //this fetches and prepares the data asynchronously\r\n  const fetchData = useCallback(async () => {\r\n    const response = await fetch(fetchUrl);\r\n    const data = await response.json();\r\n    setData(data);\r\n  }, [fetchUrl]);\r\n\r\n  useEffect(fetchData, [fetchUrl]);\r\n\r\n  return [data, setFetchUrl];\r\n};\r\n\r\nexport default useFectch;\r\n","import React from \"react\";\r\n\r\nimport \"./card.css\";\r\n\r\nconst Card = (props) => {\r\n  const { id, name, email } = props.data;\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\r\n        alt=\"monster\"\r\n      />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport Card from \"../card/card\";\r\n\r\nimport \"./card-list.css\";\r\n\r\nconst CardList = ({ data }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {data.map((item) => (\r\n        <Card key={item.id} data={item} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import { useState } from \"react\";\r\n\r\nconst useInput = (initialValue) => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  const onChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return [value, onChange];\r\n};\r\n\r\nexport default useInput;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport useInput from \"../../hooks/useInput\";\r\n\r\nimport \"./search-box.css\";\r\n\r\nconst SearchBox = (props) => {\r\n  const { type, value, onChange, className, placeholder } = props;\r\n\r\n  //extrapolated input value/onChange hook\r\n  const [searchVal, onSearchChange] = useInput(value);\r\n\r\n  //trigger onChange event on props\r\n  useEffect(() => {\r\n    onChange(searchVal);\r\n  }, [searchVal, onChange]);\r\n\r\n  //what properties should be on our input item?\r\n  const inputProps = {\r\n    type: type || \"search\",\r\n    value: searchVal,\r\n    onChange: onSearchChange,\r\n    className: className || \"search\",\r\n    placeholder: placeholder || \"Search Monsters...\",\r\n  };\r\n\r\n  return <input {...inputProps} />;\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { useState } from \"react\";\n\nimport useFetch from \"./hooks/useFetch\";\n\nimport CardList from \"./components/card-list/card-list\";\nimport SearchBox from \"./components/search-box/search-box\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [mutants] = useFetch(\"https://jsonplaceholder.typicode.com/users\");\n\n  const [searchVal, setSearchVal] = useState(\"\");\n\n  const filteredMutants = mutants.filter((mutant) =>\n    mutant.name.toLowerCase().includes(searchVal.toLowerCase())\n  );\n\n  const handleSearchChange = (newVal) => {\n    setSearchVal(newVal);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox value={searchVal} onChange={handleSearchChange} />\n      {filteredMutants.length > 0 && <CardList data={filteredMutants} />}\n      {filteredMutants.length === 0 && (\n        <h2>There are no mutants matching that name!!!</h2>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}